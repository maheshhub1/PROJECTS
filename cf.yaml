Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  

  
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyNatGateway

  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable




  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicInstanceSG


  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from PublicInstance on port 8000
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: PrivateInstanceSG

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0af9569868786b23a 
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateInstanceSecurityGroup
      KeyName: tambiprv 
      Tags:
        - Key: Name
          Value: PrivateInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install httpd -y
          sudo systemctl enable httpd
          sudo systemctl start httpd
          sudo echo "<h1/>HELLO WORLD</h1>" > /var/www/html/index.html
          sudo sed -i 's/^Listen 80/Listen 8000/' /etc/httpd/conf/httpd.conf
          sudo systemctl restart httpd
          # #!/bin/bash
          # yum update -y
          # Example: Start a simple Python HTTP server on port 8000
          # yum install -y python3
          # nohup python3 -m http.server 8000 --bind 0.0.0.0 &*/

  
  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0af9569868786b23a
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: tambiprv
      Tags:
        - Key: Name
          Value: PublicInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nginx
          systemctl enable nginx
          systemctl start nginx
          # Overwrite nginx config for reverse proxy
          cat > /etc/nginx/conf.d/reverse-proxy.conf <<EOF
          server {
              listen 8080;
              location / {
                  proxy_pass http://${PrivateInstance.PrivateIp}:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
              }
          }
          EOF
          systemctl restart nginx

Outputs:
  VPCId:
    Description: The VPC ID
    Value: !Ref MyVPC
  PublicSubnetId:
    Description: The Public Subnet ID
    Value: !Ref PublicSubnet
  PrivateSubnetId:
    Description: The Private Subnet ID
    Value: !Ref PrivateSubnet
  PublicInstanceId:
    Description: The Public EC2 Instance ID
    Value: !Ref PublicInstance
  PublicInstancePublicIP:
    Description: The Public IP of the EC2 Instance
    Value: !GetAtt PublicInstance.PublicIp
  PrivateInstanceId:
    Description: The Private EC2 Instance ID
    Value: !Ref PrivateInstance
  PrivateInstancePrivateIP:
    Description: The Private IP of the Private EC2 Instance
    Value: !GetAtt PrivateInstance.PrivateIp
  InternetGatewayId:
    Description: The Internet Gateway ID
    Value: !Ref InternetGateway
  NatGatewayId:
    Description: The NAT Gateway ID
    Value: !Ref NatGateway
  NatEIP:
    Description: The Elastic IP for the NAT Gateway
    Value: !Ref NatEIP
  InstanceSecurityGroupId:
    Description: The Security Group ID for the Public Instance
    Value: !Ref InstanceSecurityGroup
  PrivateInstanceSecurityGroupId:
    Description: The Security Group ID for the Private Instance
    Value: !Ref PrivateInstanceSecurityGroup